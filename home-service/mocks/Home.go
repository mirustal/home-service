// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "home-service/internal/models"
)

// Home is an autogenerated mock type for the Home type
type Home struct {
	mock.Mock
}

// CreateFlat provides a mock function with given fields: ctx, house_id, price, rooms
func (_m *Home) CreateFlat(ctx context.Context, house_id int, price int, rooms int) (models.Flat, error) {
	ret := _m.Called(ctx, house_id, price, rooms)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlat")
	}

	var r0 models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) (models.Flat, error)); ok {
		return rf(ctx, house_id, price, rooms)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) models.Flat); ok {
		r0 = rf(ctx, house_id, price, rooms)
	} else {
		r0 = ret.Get(0).(models.Flat)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(ctx, house_id, price, rooms)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHouse provides a mock function with given fields: ctx, address, year, developer
func (_m *Home) CreateHouse(ctx context.Context, address string, year int, developer string) (models.House, error) {
	ret := _m.Called(ctx, address, year, developer)

	if len(ret) == 0 {
		panic("no return value specified for CreateHouse")
	}

	var r0 models.House
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) (models.House, error)); ok {
		return rf(ctx, address, year, developer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) models.House); ok {
		r0 = rf(ctx, address, year, developer)
	} else {
		r0 = ret.Get(0).(models.House)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, string) error); ok {
		r1 = rf(ctx, address, year, developer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlatsInHouse provides a mock function with given fields: ctx, id, userType
func (_m *Home) GetFlatsInHouse(ctx context.Context, id int, userType string) ([]models.Flat, error) {
	ret := _m.Called(ctx, id, userType)

	if len(ret) == 0 {
		panic("no return value specified for GetFlatsInHouse")
	}

	var r0 []models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) ([]models.Flat, error)); ok {
		return rf(ctx, id, userType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) []models.Flat); ok {
		r0 = rf(ctx, id, userType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, id, userType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToHouse provides a mock function with given fields: ctx, id, email
func (_m *Home) SubscribeToHouse(ctx context.Context, id int, email string) error {
	ret := _m.Called(ctx, id, email)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToHouse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, id, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFlat provides a mock function with given fields: ctx, id, status
func (_m *Home) UpdateFlat(ctx context.Context, id int, status string) (models.Flat, error) {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlat")
	}

	var r0 models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (models.Flat, error)); ok {
		return rf(ctx, id, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) models.Flat); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Get(0).(models.Flat)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHome creates a new instance of Home. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHome(t interface {
	mock.TestingT
	Cleanup(func())
}) *Home {
	mock := &Home{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
