// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "home-service/pkg/pb"
)

// HouseServiceClient is an autogenerated mock type for the HouseServiceClient type
type HouseServiceClient struct {
	mock.Mock
}

// CreateFlat provides a mock function with given fields: ctx, in, opts
func (_m *HouseServiceClient) CreateFlat(ctx context.Context, in *pb.CreateFlatRequest, opts ...grpc.CallOption) (*pb.CreateFlatResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlat")
	}

	var r0 *pb.CreateFlatResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateFlatRequest, ...grpc.CallOption) (*pb.CreateFlatResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateFlatRequest, ...grpc.CallOption) *pb.CreateFlatResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.CreateFlatResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateFlatRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHouse provides a mock function with given fields: ctx, in, opts
func (_m *HouseServiceClient) CreateHouse(ctx context.Context, in *pb.CreateHouseRequest, opts ...grpc.CallOption) (*pb.CreateHouseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHouse")
	}

	var r0 *pb.CreateHouseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateHouseRequest, ...grpc.CallOption) (*pb.CreateHouseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateHouseRequest, ...grpc.CallOption) *pb.CreateHouseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.CreateHouseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateHouseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlatsInHouse provides a mock function with given fields: ctx, in, opts
func (_m *HouseServiceClient) GetFlatsInHouse(ctx context.Context, in *pb.GetFlatsInHouseRequest, opts ...grpc.CallOption) (*pb.GetFlatsInHouseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFlatsInHouse")
	}

	var r0 *pb.GetFlatsInHouseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetFlatsInHouseRequest, ...grpc.CallOption) (*pb.GetFlatsInHouseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetFlatsInHouseRequest, ...grpc.CallOption) *pb.GetFlatsInHouseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetFlatsInHouseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetFlatsInHouseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToHouse provides a mock function with given fields: ctx, in, opts
func (_m *HouseServiceClient) SubscribeToHouse(ctx context.Context, in *pb.SubscribeToHouseRequest, opts ...grpc.CallOption) (*pb.SubscribeToHouseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToHouse")
	}

	var r0 *pb.SubscribeToHouseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SubscribeToHouseRequest, ...grpc.CallOption) (*pb.SubscribeToHouseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SubscribeToHouseRequest, ...grpc.CallOption) *pb.SubscribeToHouseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.SubscribeToHouseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.SubscribeToHouseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFlat provides a mock function with given fields: ctx, in, opts
func (_m *HouseServiceClient) UpdateFlat(ctx context.Context, in *pb.UpdateFlatRequest, opts ...grpc.CallOption) (*pb.UpdateFlatResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlat")
	}

	var r0 *pb.UpdateFlatResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateFlatRequest, ...grpc.CallOption) (*pb.UpdateFlatResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateFlatRequest, ...grpc.CallOption) *pb.UpdateFlatResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UpdateFlatResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateFlatRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHouseServiceClient creates a new instance of HouseServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHouseServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *HouseServiceClient {
	mock := &HouseServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
