// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HouseSubscriber is an autogenerated mock type for the HouseSubscriber type
type HouseSubscriber struct {
	mock.Mock
}

// SubscribeToHouse provides a mock function with given fields: ctx, houseID, email
func (_m *HouseSubscriber) SubscribeToHouse(ctx context.Context, houseID int, email string) (int, error) {
	ret := _m.Called(ctx, houseID, email)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToHouse")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (int, error)); ok {
		return rf(ctx, houseID, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) int); ok {
		r0 = rf(ctx, houseID, email)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, houseID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHouseSubscriber creates a new instance of HouseSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHouseSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *HouseSubscriber {
	mock := &HouseSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
