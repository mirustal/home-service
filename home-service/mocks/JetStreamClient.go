// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	nats "github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"
)

// JetStreamClient is an autogenerated mock type for the JetStreamClient type
type JetStreamClient struct {
	mock.Mock
}

// Publish provides a mock function with given fields: subject, message
func (_m *JetStreamClient) Publish(subject string, message []byte) error {
	ret := _m.Called(subject, message)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(subject, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: subject, handler
func (_m *JetStreamClient) Subscribe(subject string, handler nats.MsgHandler) (*nats.Subscription, error) {
	ret := _m.Called(subject, handler)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 *nats.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string, nats.MsgHandler) (*nats.Subscription, error)); ok {
		return rf(subject, handler)
	}
	if rf, ok := ret.Get(0).(func(string, nats.MsgHandler) *nats.Subscription); ok {
		r0 = rf(subject, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string, nats.MsgHandler) error); ok {
		r1 = rf(subject, handler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJetStreamClient creates a new instance of JetStreamClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJetStreamClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *JetStreamClient {
	mock := &JetStreamClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
